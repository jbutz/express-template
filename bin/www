#!/usr/bin/env node
require('dotenv').config();
const app = require('../src/app');
const debug = require('debug')('express:server');
const fs = require('fs');
const http = require('http');
const spdy = require('spdy');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

let server = http.createServer(app);
if (fs.existsSync('server-key.pem') && fs.existsSync('server-cert.pem')) {
    debug('Found key and certificate, starting HTTP2 Secure Server');
    server = spdy.createServer({
        allowHTTP1: true,
        key: fs.readFileSync('server-key.pem'),
        cert: fs.readFileSync('server-cert.pem'),
    }, app);
}

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break; // eslint-disable-line no-unreachable
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break; // eslint-disable-line no-unreachable
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
